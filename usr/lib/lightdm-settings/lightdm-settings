#!/usr/bin/python3

import setproctitle
import os
import gettext
import sys
import glob
import subprocess, binascii
from distutils.version import LooseVersion

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk, Gio, GLib, GdkPixbuf
from xapp.GSettingsWidgets import *

try:
    import lsb_release
except:
    pass

setproctitle.setproctitle("lightdm-settings")

gettext.install("lightdm-settings", "/usr/share/locale")

CONF_PATH = "/etc/lightdm/slick-greeter.conf"
LIGHTDM_CONF_PATH = "/etc/lightdm/lightdm.conf"
LIGHTDM_GROUP_NAMES = ["SeatDefaults", "Seat:*"]

class SidePage:

    def __init__(self, notebook_index, name, icon):
        self.notebook_index = notebook_index
        self.name = name
        self.icon = icon

class LightDMSettings:

    # Change pages and sidebar menus
    def side_view_nav(self, param):
        treePaths = param.get_selected_items()
        if (len(treePaths) > 0):
            treePath = treePaths[0]
            index = int("%s" % treePath) #Hack to turn treePath into an int
            target = self.sidePages[index].notebook_index
            self.builder.get_object("notebook1").set_current_page(target)

    # Creating the UI
    def __init__(self):

        # Load the glade ui file
        self.builder = Gtk.Builder()
        #self.builder.add_from_file('/usr/lib/lightdm-settings/lightdm-settings.ui')
        self.builder.add_from_file('/home/santiago/Git/lightdm-settings/usr/lib/lightdm-settings/lightdm-settings.ui')
        self.window = self.builder.get_object("main_window")
        self.window.connect("destroy", Gtk.main_quit)

        # Reading settings and debugging
        settings = Gio.Settings("x.dm.slick-greeter")

        debug = False
        if len(sys.argv) > 1 and sys.argv[1] == "debug":
            debug = True

        # Slick settings
        keyfile = GLib.KeyFile()
        try:
            keyfile.load_from_file(CONF_PATH, 0)
        except:
            print("Could not load %s." % CONF_PATH)

        # LightDM settings
        lightdm_keyfile = GLib.KeyFile()
        try:
            lightdm_keyfile.load_from_file(LIGHTDM_CONF_PATH, GLib.KeyFileFlags.KEEP_COMMENTS)
        except:
            print("Could not load %s." % LIGHTDM_CONF_PATH)

        # Setting up the components
        # Using normal icons
        side_appearance = SidePage(0, _("Appearance"), "applications-graphics")
        side_users = SidePage(1, _("Users"), "system-users")
        side_settings = SidePage(2, _("Settings"), "applications-system-symbolic")

        self.sidePages = [side_appearance, side_users, side_settings]

        # create the backing store for the side nav-view.
        theme = Gtk.IconTheme.get_default()
        self.store = Gtk.ListStore(str, GdkPixbuf.Pixbuf)
        for sidePage in self.sidePages:
            img = theme.load_icon(sidePage.icon, 36, 0)
            self.store.append([sidePage.name, img])

        target = self.sidePages[0].notebook_index
        self.builder.get_object("notebook1").set_current_page(target)

        # set up the side view - navigation.
        self.builder.get_object("side_view").set_text_column(0)
        self.builder.get_object("side_view").set_pixbuf_column(1)
        self.builder.get_object("side_view").set_model(self.store)
        self.builder.get_object("side_view").select_path(Gtk.TreePath.new_first())
        self.builder.get_object("side_view").connect("selection_changed", self.side_view_nav)

        # set up larger components.
        self.window.set_title(_("LightDM Settings"))
        self.window.connect("destroy", Gtk.main_quit)

        # Appearance section
        vbox = self.builder.get_object("vbox_appearance")
        page = SettingsPage()
        vbox.pack_start(page, True, True, 0)

        section = page.add_section(_("Background"))

        section = page.add_section(_("Themes"))

        section = page.add_section(_("Optional pictures"))

        page.show_all()
        # End of Appearance section

        # Users section
        size_group = Gtk.SizeGroup()
        size_group.set_mode(Gtk.SizeGroupMode.HORIZONTAL)

        vbox = self.builder.get_object("vbox_users")
        page = SettingsPage()
        vbox.pack_start(page, True, True, 0)

        section = page.add_section(_("Login and session settings"), "* " + _("These settings require a computer reboot to take effect."))

        page.show_all()
        # End of Users section

        # Settings section
        size_group = Gtk.SizeGroup()
        size_group.set_mode(Gtk.SizeGroupMode.HORIZONTAL)

        vbox = self.builder.get_object("vbox_settings")
        page = SettingsPage()
        vbox.pack_start(page, True, True, 0)

        section = page.add_section(_("Settings"))

        section = page.add_section(_("Panel indicators"))

        page.show_all()
        # End of Settings section

        self.window.show()


if __name__ == "__main__":
    LightDMSettings()
    Gtk.main()